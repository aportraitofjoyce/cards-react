{"version":3,"sources":["components/UI/Input/Input.module.css","pages/NewPassword/NewPassword.module.css","pages/PasswordRecovery/CheckEmail/CheckEmail.module.css","components/UI/Button/Button.module.css","components/Header/Header.module.css","components/UI/Checkbox/Checkbox.module.css","routes/routes.ts","pages/Profile/Profile.tsx","components/UI/Input/Input.tsx","components/UI/Button/Button.tsx","components/UI/Checkbox/Checkbox.tsx","api/axios-instance.ts","api/login-api.ts","store/reducers/login-reducer.ts","hooks/hooks.ts","api/register-api.ts","store/reducers/register-reducer.ts","api/password-api.ts","store/reducers/password-recovery-reducer.ts","pages/Login/Login.tsx","pages/Register/Register.tsx","pages/PasswordRecovery/ForgotPassword.tsx","pages/NewPassword/NewPassword.tsx","pages/PasswordRecovery/CheckEmail/CheckEmail.tsx","components/UIKit/UiKit.tsx","pages/Error/Error.tsx","app/AppRouter.tsx","components/Header/Header.tsx","store/reducers/profile-reducer.ts","store/reducers/auth-reducer.ts","store/reducers/app-reducer.ts","store/store.ts","app/App.tsx","index.tsx"],"names":["module","exports","PATH","Profile","name","useSelector","state","login","avatar","publicCardPacksCount","Input","props","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","restProps","inputClassNames","s","errorInput","spanClassNames","container","e","currentTarget","value","key","placeholder","Button","secondary","grouped","classNames","Checkbox","onChangeChecked","children","checkbox","checked","instance","axios","create","baseURL","withCredentials","loginApi","email","password","rememberMe","post","SET_USER_DATA","initialState","userPostLogin","dispatch","then","res","data","payload","setUserData","catch","response","message","console","log","finally","useTypedSelector","useInput","initialValue","validators","useState","setValue","touched","setTouched","onBlur","validation","useValidation","isValid","setIsValid","isRequired","setIsRequired","isEmail","setIsEmail","minLength","setMinLength","maxLength","setMaxLength","useEffect","validator","length","test","String","toLowerCase","registerAPI","registerSuccess","passwordApi","setEmailRecovery","publicRoutes","path","HOME","component","exact","PROFILE","LOGIN","setEmail","setPassword","remember","setRemember","useDispatch","history","useHistory","onSubmit","push","htmlFor","id","to","PASSWORD_RECOVERY","REGISTER","register","confirmPassword","a","status","alert","style","display","flexDirection","gap","color","disabled","NEW_PASSWORD","linkInRecoverEmailToGithubPages","from","forgotPassTC","CHECK_EMAIL","firstPass","setFirstPass","secondPass","setSecondPass","token","useParams","wrapper","form","resetPassToken","setNewPasswordTC","checkEmail","icon","src","alt","UI_KIT","alignItems","ERROR","AppRouter","map","r","Header","rootReducer","combineReducers","profile","action","auth","app","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f343c866.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__3GYcG\",\"errorInput\":\"Input_errorInput__3GgPO\",\"error\":\"Input_error__2xVl4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"NewPassword_wrapper__17zrJ\",\"container\":\"NewPassword_container__GjiqG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkEmail\":\"CheckEmail_checkEmail__1T71d\",\"container\":\"CheckEmail_container__3RPFL\",\"icon\":\"CheckEmail_icon__2LX8H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__2galI\",\"secondary\":\"Button_secondary__3XSP1\",\"grouped\":\"Button_grouped__3cKo2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__2vAGZ\",\"container\":\"Header_container__236E4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__3lVeK\"};","import {FC} from 'react'\r\nimport {Profile} from '../pages/Profile/Profile'\r\nimport {Login} from '../pages/Login/Login'\r\nimport {Register} from '../pages/Register/Register'\r\nimport {UiKit} from '../components/UIKit/UiKit'\r\nimport {Error} from '../pages/Error/Error'\r\nimport {ForgotPassword} from '../pages/PasswordRecovery/ForgotPassword'\r\nimport {NewPassword} from '../pages/NewPassword/NewPassword'\r\nimport {CheckEmail} from \"../pages/PasswordRecovery/CheckEmail/CheckEmail\";\r\n\r\nexport enum PATH {\r\n    HOME = '/',\r\n    ERROR = '',\r\n    PROFILE = '/profile',\r\n    LOGIN = '/login',\r\n    REGISTER = '/register',\r\n    PASSWORD_RECOVERY = '/passrecovery',\r\n    NEW_PASSWORD = '/newpass',\r\n    CHECK_EMAIL = '/check-email',\r\n    UI_KIT = '/ui-kit',\r\n}\r\n\r\ntype Routes = {\r\n    path: string,\r\n    component: FC\r\n    exact?: boolean\r\n}\r\n\r\nexport const publicRoutes: Routes[] = [\r\n    {path: PATH.HOME, component: Profile, exact: true},\r\n    {path: PATH.PROFILE, component: Profile},\r\n    {path: PATH.LOGIN, component: Login},\r\n    {path: PATH.REGISTER, component: Register},\r\n    {path: PATH.PASSWORD_RECOVERY, component: ForgotPassword},\r\n    {path: PATH.NEW_PASSWORD, component: NewPassword},\r\n    {path: PATH.CHECK_EMAIL, component: CheckEmail},\r\n    {path: PATH.UI_KIT, component: UiKit},\r\n    {path: PATH.ERROR, component: Error},\r\n]","import React, {FC} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {RootState} from \"../../store/store\";\r\n\r\nexport const Profile: FC = () => {\r\n    const name = useSelector<RootState, string>(state => state.login.name)\r\n    const avatar = useSelector<RootState, string>(state => state.login.avatar)\r\n    const publicCardPacksCount = useSelector<RootState, number>(state => state.login.publicCardPacksCount)\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <h1>Profile</h1>\r\n                <div>{name}</div>\r\n                <div>{avatar}</div>\r\n                <div>{publicCardPacksCount}</div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './Input.module.css'\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype InputTextProps = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nexport const Input: FC<InputTextProps> = props => {\r\n    const {\r\n        type,\r\n        onChange,\r\n        onChangeText,\r\n        onKeyPress,\r\n        onEnter,\r\n        error,\r\n        className,\r\n        spanClassName,\r\n        ...restProps\r\n    } = props\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e)\r\n        onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n\r\n    const inputClassNames = `${error ? s.errorInput : ''}${className ? className : ''}`\r\n    const spanClassNames = `${s.error}${spanClassName ? spanClassName : ''}`\r\n\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <input type={type || 'text'}\r\n                   onChange={onChangeCallback}\r\n                   onKeyPress={onKeyPressCallback}\r\n                   className={inputClassNames}\r\n                   placeholder={'Введите текст...'}\r\n                   {...restProps}/>\r\n            {error && <span className={spanClassNames}>{error}</span>}\r\n        </div>\r\n    )\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps, FC} from 'react'\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonProps = DefaultButtonPropsType & {\r\n    secondary?: boolean\r\n    grouped?: boolean\r\n}\r\n\r\nexport const Button: FC<ButtonProps> = props => {\r\n    const {secondary, className, grouped, ...restProps} = props\r\n    const classNames = `${secondary ? s.secondary : ''}${grouped ? s.grouped : ''}${className ? className : ''}`\r\n\r\n    return <button className={classNames} {...restProps}/>\r\n}","import React, {ChangeEvent, DetailedHTMLProps, FC, InputHTMLAttributes} from 'react'\r\nimport s from './Checkbox.module.css'\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype CheckboxProps = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nexport const Checkbox: FC<CheckboxProps> = props => {\r\n    const {\r\n        type,\r\n        onChange,\r\n        onChangeChecked,\r\n        className,\r\n        spanClassName,\r\n        children,\r\n        ...restProps\r\n    } = props\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const classNames = `${s.checkbox}${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input type={'checkbox'}\r\n                   onChange={onChangeCallback}\r\n                   className={classNames}\r\n                   {...restProps}/>\r\n            {children && <span>{children}</span>}\r\n        </label>\r\n    )\r\n}","import axios from 'axios'\r\n\r\nconst developmentMode = false\r\n\r\nexport const instance = axios.create({\r\n    baseURL: developmentMode ? 'http://localhost:7542/2.0' : 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n})","import {AxiosResponse} from \"axios\";\r\nimport {instance} from './axios-instance'\r\n\r\nexport type LoginRequestType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type LoginResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar: string;\r\n    publicCardPacksCount: number; // количество колод\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // подтвердил ли почту\r\n    rememberMe: boolean;\r\n    error?: string;\r\n}\r\n\r\nexport const loginApi = {\r\n    login(email: string, password: string,\r\n          rememberMe: boolean) {\r\n        return instance.post<LoginRequestType, AxiosResponse<LoginResponseType>>(`/auth/login`, {\r\n            email,\r\n            password,\r\n            rememberMe\r\n        })\r\n    },\r\n}\r\n","import {ThunkDispatch} from \"redux-thunk\";\r\nimport {loginApi} from \"../../api/login-api\";\r\nimport {RootState} from \"../store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\ntype InitialStateType = {\r\n    name: string,\r\n    avatar: string,\r\n    publicCardPacksCount: number,\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0,\r\n}\r\n\r\n\r\nexport const loginReducer = (state = initialState, action: LoginActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                avatar: action.payload.avatar,\r\n                name: action.payload.name,\r\n                publicCardPacksCount: action.payload.publicCardPacksCount\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// ActionsTypes\r\n\r\nexport type LoginActionType =\r\n    ReturnType<typeof setUserData>\r\n\r\n// Actions\r\n\r\nexport const setUserData = (name: string, avatar: string, publicCardPacksCount: number) => {\r\n    return {type: SET_USER_DATA, payload: {name, avatar, publicCardPacksCount}} as const\r\n}\r\n\r\n//Thunk\r\n\r\n\r\nexport const userPostLogin = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n    loginApi.login(email, password, rememberMe)\r\n        .then((res) => {\r\n            let {email, avatar, publicCardPacksCount} = res.data\r\n            dispatch(setUserData(email, avatar, publicCardPacksCount))\r\n        })\r\n        .catch((e: any) => {\r\n            const error = e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console');\r\n            console.log('Error:', {...e})\r\n        })\r\n        .finally()\r\n}","import {TypedUseSelectorHook, useSelector} from 'react-redux'\r\nimport {RootState} from '../store/store'\r\nimport {ChangeEvent, useEffect, useState} from 'react'\r\n\r\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector\r\n\r\nexport const useInput = (initialValue: string, validators: Validators) => {\r\n    const [value, setValue] = useState<string>(initialValue)\r\n    const [touched, setTouched] = useState<boolean>(false)\r\n    const validation = useValidation(value, validators)\r\n\r\n    const onChange = (e: ChangeEvent<HTMLInputElement>) => setValue(e.currentTarget.value)\r\n    const onBlur = () => setTouched(true)\r\n\r\n    return {\r\n        value,\r\n        touched,\r\n        onChange,\r\n        onBlur,\r\n        validation\r\n    }\r\n}\r\n\r\ntype Validators = {\r\n    isRequired?: boolean\r\n    minLength?: number\r\n    maxLength?: number\r\n    isEmail?: boolean\r\n}\r\n\r\nexport const useValidation = (value: string, validators: Validators) => {\r\n    const [isValid, setIsValid] = useState<boolean>(false)\r\n\r\n    const [isRequired, setIsRequired] = useState<string>('')\r\n    const [isEmail, setIsEmail] = useState<string>('')\r\n    const [minLength, setMinLength] = useState<string>('')\r\n    const [maxLength, setMaxLength] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        for (const validator in validators) {\r\n            switch (validator) {\r\n                case 'isRequired':\r\n                    !value\r\n                        ? setIsRequired('Field is required')\r\n                        : setIsRequired('')\r\n                    break\r\n\r\n                case 'minLength':\r\n                    value.length < validators[validator]!\r\n                        ? setMinLength(`Min length must be more than ${validators[validator]!}`)\r\n                        : setMinLength('')\r\n                    break\r\n\r\n                case 'maxLength':\r\n                    value.length > validators[validator]!\r\n                        ? setMaxLength(`Max length must be less than ${validators[validator]!}`)\r\n                        : setMaxLength('')\r\n                    break\r\n\r\n                case 'isEmail':\r\n                    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n                        .test(String(value).toLowerCase())\r\n                        ? setIsEmail('')\r\n                        : setIsEmail('Wrong email address')\r\n                    break\r\n\r\n            }\r\n        }\r\n    }, [value])\r\n\r\n    useEffect(() => {\r\n        (isRequired || isEmail || minLength || maxLength) ? setIsValid(false) : setIsValid(true)\r\n    }, [validators])\r\n\r\n    return {\r\n        isValid,\r\n        isRequired,\r\n        isEmail,\r\n        minLength,\r\n        maxLength\r\n    }\r\n}","import {instance} from './axios-instance'\r\nimport {AxiosResponse} from 'axios'\r\n\r\nexport type RegisterUsersData = {\r\n    email: string\r\n    password: string\r\n}\r\n\r\nexport const registerAPI = {\r\n    register: (data: RegisterUsersData) => instance\r\n        .post<RegisterUsersData, AxiosResponse<{ error?: string }>>('/auth/register', data)\r\n}","import {AppDispatch} from '../store'\r\nimport {registerAPI, RegisterUsersData} from '../../api/register-api'\r\n\r\nconst initialState = {\r\n    registerSuccess: false\r\n}\r\n\r\nexport const registerReducer = (state = initialState, action: RegisterActionsType): typeof initialState => {\r\n    switch (action.type) {\r\n        case 'REGISTER':\r\n            return {...state, registerSuccess: action.payload.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type RegisterActionsType = ReturnType<typeof setRegisterData>\r\n\r\nconst setRegisterData = (status: boolean) => ({\r\n    type: 'REGISTER', payload: {status}\r\n} as const)\r\n\r\nexport const register = (data: RegisterUsersData) => async (dispatch: AppDispatch) => {\r\n    try {\r\n        await registerAPI.register(data)\r\n        dispatch(setRegisterData(true))\r\n    } catch (e: any) {\r\n        const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n        alert(error)\r\n    } finally {\r\n    }\r\n}","import {instance} from \"./axios-instance\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\nexport const passwordApi = {\r\n    forgot(payload: ForgotRequestType) {\r\n        return instance.post<ForgotRequestType, AxiosResponse<ResponseType>>(`/auth/forgot`, payload);\r\n    },\r\n    setNewPassword(payload: SetNewPasswordRequestType) {\r\n        return instance.post<SetNewPasswordRequestType, AxiosResponse<ResponseType>>(`/auth/set-new-password`, payload);\r\n    }\r\n}\r\n\r\n//TYPES\r\n\r\nexport type  ForgotRequestType = {\r\n    email: string,\r\n    from: string,\r\n    message: string\r\n}\r\n\r\nexport type SetNewPasswordRequestType = {\r\n    password: string,\r\n    resetPassToken: string\r\n}\r\n\r\n// респонс повторяется\r\nexport type ResponseType = {\r\n    info: string,\r\n    error?: string\r\n}","import {Dispatch} from \"redux\";\r\nimport {ForgotRequestType, passwordApi} from \"../../api/password-api\";\r\nimport {PATH} from \"../../routes/routes\";\r\n\r\ntype InitialStateType = {\r\n    email: string\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    email: 'your email'\r\n}\r\n\r\nexport const passwordRecoveryReducer = (state = initialState, action: ActionsType): typeof initialState => {\r\n    switch (action.type) {\r\n        case \"recovery/SET-EMAIL\":\r\n            return {...state, email: action.email}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//THUNKS\r\n//TODO при деплое на GH-PAGES изменить на linkInRecoverEmailToGithubPages\r\nexport const forgotPassTC = (email: string) => async (dispatch: Dispatch) => {\r\n    const linkInRecoverEmailToLocal = `http://localhost:3000/cards-react#${PATH.NEW_PASSWORD}/$token$`\r\n    const linkInRecoverEmailToGithubPages = `https://aportraitofjoyce.github.io/cards-react#${PATH.NEW_PASSWORD}/$token$`\r\n\r\n    try {\r\n        const payload: ForgotRequestType = {\r\n            email,\r\n            from: 'test-front-admin,<sberBank_security@gmail.com>',\r\n            message: `<div style='background-color: lime; padding: 15px'>password recovery link: <a href=${linkInRecoverEmailToGithubPages}>link</a></div>`\r\n        };\r\n        dispatch(setEmailRecovery(email));\r\n        await passwordApi.forgot(payload);\r\n    } catch (error) {\r\n        console.log('some error forgotPassTC');\r\n    }\r\n}\r\n\r\nexport const setNewPasswordTC = (token: string, password: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        const payload = {\r\n            password: password,\r\n            resetPassToken: token\r\n        }\r\n        await passwordApi.setNewPassword(payload);\r\n        alert('пароль изменён');\r\n    } catch (error) {\r\n        console.log('some error setNewPasswordTC');\r\n    }\r\n}\r\n\r\n//ACTIONS\r\n\r\nexport const setEmailRecovery = (email: string) => ({type: 'recovery/SET-EMAIL', email} as const);\r\n\r\n//TYPES\r\n\r\ntype ActionsType = SetEmailRecoveryType;\r\n\r\ntype SetEmailRecoveryType = ReturnType<typeof setEmailRecovery>;","import React, {FC, useState} from 'react'\r\nimport {Input} from \"../../components/UI/Input/Input\";\r\nimport {Button} from \"../../components/UI/Button/Button\";\r\nimport {Checkbox} from \"../../components/UI/Checkbox/Checkbox\";\r\nimport {NavLink, useHistory} from \"react-router-dom\";\r\nimport {PATH} from '../../routes/routes';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {userPostLogin} from \"../../store/reducers/login-reducer\";\r\nimport {useTypedSelector} from \"../../hooks/hooks\";\r\n\r\nexport const Login: FC = () => {\r\n\r\n    const data = useTypedSelector(state => state.login)\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [remember, setRemember] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory();\r\n\r\n\r\n    const onSubmit = () => {\r\n            dispatch(userPostLogin(email, password, remember))\r\n            setEmail('')\r\n            setPassword('')\r\n            history.push(PATH.PROFILE)\r\n        console.log(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Sign In</h1>\r\n            <form onSubmit={onSubmit}>\r\n                <h1>{data.name}</h1>\r\n                <label htmlFor=\"loginEmail\">Email</label>\r\n                <Input\r\n                    id={'loginEmail'}\r\n                    type={\"email\"}\r\n                    placeholder={'Enter your email address'}\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.currentTarget.value)}\r\n                />\r\n                <label htmlFor=\"loginPassword\">Password</label>\r\n                <Input\r\n                    id={'loginPassword'}\r\n                    type={\"password\"}\r\n                    placeholder={'Enter your password'}\r\n                    value={password}\r\n                    onChange={(e) => setPassword(e.currentTarget.value)}\r\n                />\r\n                <NavLink to={PATH.PASSWORD_RECOVERY}>\r\n                    <h4>Forgot Password</h4>\r\n                </NavLink>\r\n                <Checkbox\r\n                    // value={remember}\r\n                    checked={remember}\r\n                    onChange={(e) => setRemember(e.currentTarget.checked)}\r\n                >Remember me</Checkbox>\r\n                <Button type={\"submit\"}>Login</Button>\r\n                <div>\r\n                    <p>Don’t have an account?</p>\r\n                    <NavLink to={PATH.REGISTER}>\r\n                        <h4>Sign Up</h4>\r\n                    </NavLink>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, FC, useEffect, useState} from 'react'\r\nimport {Input} from '../../components/UI/Input/Input'\r\nimport {Button} from '../../components/UI/Button/Button'\r\nimport {useInput, useTypedSelector} from '../../hooks/hooks'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {PATH} from '../../routes/routes'\r\nimport {register} from '../../store/reducers/register-reducer'\r\nimport {useDispatch} from 'react-redux'\r\n\r\n\r\nexport const Register: FC = () => {\r\n    const registerSuccess = useTypedSelector(state => state.register.registerSuccess)\r\n    const dispatch = useDispatch()\r\n\r\n    const email = useInput('', {isRequired: true, isEmail: true})\r\n    const password = useInput('', {minLength: 7, maxLength: 25})\r\n    const confirmPassword = useInput('', {minLength: 7, maxLength: 25})\r\n\r\n    const onSubmit = () => {\r\n        dispatch(register({email: email.value, password: password.value}))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {registerSuccess && <Redirect to={PATH.LOGIN}/>}\r\n\r\n            <h1>Register</h1>\r\n\r\n            <form onSubmit={onSubmit} style={{display: 'flex', flexDirection: 'column', gap: 24}}>\r\n                <label htmlFor={'registerEmail'}>Email</label>\r\n                <Input id={'registerEmail'}\r\n                       type={'email'}\r\n                       placeholder={'Enter you email address...'}\r\n                       {...email}/>\r\n\r\n                {(email.touched && email.validation) &&\r\n\t\t\t\t<span style={{color: 'red'}}>{email.validation.isRequired || email.validation.isEmail}</span>}\r\n\r\n                <label htmlFor={'registerPassword'}>Password</label>\r\n                <Input id={'registerPassword'}\r\n                       type={'text'}\r\n                       placeholder={'Enter your password...'}\r\n                       {...password}/>\r\n\r\n                {(password.touched && password.validation) &&\r\n\t\t\t\t<span style={{color: 'red'}}>{password.validation.minLength || password.validation.maxLength}</span>}\r\n\r\n\r\n                <label htmlFor={'registerConfirmPassword'}>Confirm Password</label>\r\n                <Input id={'registerConfirmPassword'}\r\n                       type={'text'}\r\n                       placeholder={'Confirm your password...'}\r\n                       {...confirmPassword}/>\r\n\r\n                {(confirmPassword.touched && confirmPassword.validation) &&\r\n\t\t\t\t<span\r\n\t\t\t\t\tstyle={{color: 'red'}}>{confirmPassword.validation.minLength || confirmPassword.validation.maxLength}</span>}\r\n\r\n                <Button type={'submit'}\r\n                        disabled={!email.validation.isValid || !password.validation.isValid || !confirmPassword.validation.isValid}>\r\n                    Register\r\n                </Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype RegisterFormFields<T = string> = {\r\n    email: T\r\n    password: T\r\n    confirmPassword: T\r\n}\r\n\r\n/*\r\nexport const Register2: FC = () => {\r\n    const registerSuccess = useTypedSelector(state => state.register.registerSuccess)\r\n    const dispatch = useDispatch()\r\n\r\n    const [formFields, setFormFields] = useState<RegisterFormFields>({\r\n        email: '',\r\n        password: '',\r\n        confirmPassword: ''\r\n    })\r\n\r\n    const [formErrors, setFormErrors] = useState<RegisterFormFields>({\r\n        email: 'Field is required',\r\n        password: 'Field is required',\r\n        confirmPassword: 'Field is required'\r\n    })\r\n\r\n    const [formTouched, setFormTouched] = useState<RegisterFormFields<boolean>>({\r\n        email: false,\r\n        password: false,\r\n        confirmPassword: false\r\n    })\r\n\r\n    const [formValid, setFormValid] = useState<boolean>(false)\r\n\r\n    const validateEmail = (email: string) => {\r\n        return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n            .test(String(email).toLowerCase())\r\n    }\r\n\r\n    const onEmailFieldChangeHandler = (fieldText: string) => {\r\n        setFormFields({...formFields, email: fieldText})\r\n\r\n        !validateEmail(fieldText)\r\n            ? setFormErrors({...formErrors, email: 'Wrong email address'})\r\n            : setFormErrors({...formErrors, email: ''})\r\n    }\r\n\r\n    const onPasswordFieldChangeHandler = (fieldText: string) => {\r\n        setFormFields({...formFields, password: fieldText})\r\n\r\n        fieldText.length < 7 || fieldText.length > 30\r\n            ? setFormErrors({...formErrors, password: 'Must be 7-30 characters'})\r\n            : setFormErrors({...formErrors, password: ''})\r\n    }\r\n\r\n    const onPasswordConfirmFieldChangeHandler = (fieldText: string) => {\r\n        setFormFields({...formFields, confirmPassword: fieldText})\r\n\r\n        fieldText !== formFields.password\r\n            ? setFormErrors({...formErrors, confirmPassword: 'Passwords must be the same'})\r\n            : setFormErrors({...formErrors, confirmPassword: ''})\r\n    }\r\n\r\n    const onBlurHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        switch (e.currentTarget.id) {\r\n            case 'registerEmail':\r\n                setFormTouched({...formTouched, email: true})\r\n                break\r\n            case 'registerPassword':\r\n                setFormTouched({...formTouched, password: true})\r\n                break\r\n            case 'registerConfirmPassword':\r\n                setFormTouched({...formTouched, confirmPassword: true})\r\n                break\r\n        }\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        dispatch(register({email: formFields.email, password: formFields.password}))\r\n    }\r\n\r\n    useEffect(() => {\r\n        (formErrors.email || formErrors.password || formErrors.confirmPassword)\r\n            ? setFormValid(false)\r\n            : setFormValid(true)\r\n    }, [formErrors])\r\n\r\n    return (\r\n        <div>\r\n            {registerSuccess && <Redirect to={PATH.LOGIN}/>}\r\n\r\n            <h1>Register</h1>\r\n\r\n            <form onSubmit={onSubmit} style={{display: 'flex', flexDirection: 'column', gap: 24}}>\r\n                <label htmlFor={'registerEmail'}>Email</label>\r\n                <Input id={'registerEmail'}\r\n                       type={'email'}\r\n                       placeholder={'Enter you email address...'}\r\n                       value={formFields.email}\r\n                       onBlur={e => onBlurHandler(e)}\r\n                       onChangeText={onEmailFieldChangeHandler}/>\r\n\r\n                {(formTouched.email && formErrors.email) &&\r\n\t\t\t\t<span style={{color: 'red'}}>{formErrors.email}</span>}\r\n\r\n\r\n                <label htmlFor={'registerPassword'}>Password</label>\r\n                <Input id={'registerPassword'}\r\n                       type={'text'}\r\n                       placeholder={'Enter your password...'}\r\n                       value={formFields.password}\r\n                       onBlur={e => onBlurHandler(e)}\r\n                       onChangeText={onPasswordFieldChangeHandler}/>\r\n\r\n                {(formTouched.password && formErrors.password) &&\r\n\t\t\t\t<span style={{color: 'red'}}>{formErrors.password}</span>}\r\n\r\n\r\n                <label htmlFor={'registerConfirmPassword'}>Confirm Password</label>\r\n                <Input id={'registerConfirmPassword'}\r\n                       type={'text'}\r\n                       placeholder={'Confirm your password...'}\r\n                       value={formFields.confirmPassword}\r\n                       onBlur={e => onBlurHandler(e)}\r\n                       onChangeText={onPasswordConfirmFieldChangeHandler}/>\r\n\r\n                {(formTouched.confirmPassword && formErrors.confirmPassword) &&\r\n\t\t\t\t<span style={{color: 'red'}}>{formErrors.confirmPassword}</span>}\r\n\r\n                <Button disabled={!formValid} type={'submit'}>Register</Button>\r\n            </form>\r\n        </div>\r\n    )\r\n}*/\r\n","import React, {FC, useState} from 'react'\r\nimport {Button} from \"../../components/UI/Button/Button\";\r\nimport {Input} from \"../../components/UI/Input/Input\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {forgotPassTC} from \"../../store/reducers/password-recovery-reducer\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {PATH} from \"../../routes/routes\";\r\n\r\nexport const ForgotPassword: FC = () => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n\r\n    const onsubmit = () => {\r\n        if (/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(email)) { //валидация email\r\n            alert('письмо отправлено на почту')\r\n            dispatch(forgotPassTC(email))\r\n            history.push(PATH.CHECK_EMAIL)\r\n        } else {\r\n            alert('email is not valid')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={onsubmit}>\r\n                <h1>IT-incubator</h1>\r\n                <h2>Forgot your password?</h2>\r\n                <Input\r\n                    type={'email'}\r\n                    placeholder={'enter your email'}\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.currentTarget.value)}\r\n                />\r\n                <span>Enter your address and we will send you further instructions</span>\r\n                <div>\r\n                    <Button>Send instructions</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import React, {FC, useState} from 'react'\r\nimport s from './NewPassword.module.css'\r\nimport {Button} from \"../../components/UI/Button/Button\";\r\nimport {Input} from \"../../components/UI/Input/Input\";\r\nimport {PATH} from \"../../routes/routes\";\r\nimport {Redirect, useHistory, useParams} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setNewPasswordTC} from \"../../store/reducers/password-recovery-reducer\";\r\n\r\n\r\n//TODO сервер ограничивает максимальное кол-во символов пароля. доделать валидацию кол-ва символов с фронта и (или) ловить ошибку с бэка\r\n\r\nexport const NewPassword: FC = () => {\r\n    const [firstPass, setFirstPass] = useState<string>(''); // первый инпут\r\n    const [secondPass, setSecondPass] = useState<string>('');// второй инпут\r\n\r\n    const dispatch = useDispatch();\r\n    const {token} = useParams<{ token: string }>()\r\n    const history = useHistory();\r\n\r\n\r\n    const onSubmit = () => {\r\n        const passIdentical = firstPass === secondPass; //данные обоих инпутов должны быть равно\r\n        if (!passIdentical) { // если данные разные\r\n            alert('пароли не совпадают')\r\n        } else { // если совпадают\r\n            alert('пароли совпадают')\r\n            dispatch(setNewPasswordTC(token, firstPass))\r\n            history.push(PATH.LOGIN)\r\n        }\r\n        setFirstPass(''); // обнуление инпутов\r\n        setSecondPass('');\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.container}>\r\n                <form className={s.form} onSubmit={onSubmit}>\r\n                    <h1>IT-incubator</h1>\r\n                    <h2>Create new password</h2>\r\n\r\n                    <label htmlFor=\"inputNewPassword\">NewPassword</label>\r\n                    <Input\r\n                        id={'inputNewPassword'}\r\n                        type={'password'}\r\n                        onChange={(e) => setFirstPass(e.currentTarget.value)}\r\n                        value={firstPass}\r\n                        placeholder={'New password'}\r\n                    />\r\n\r\n                    <label htmlFor=\"RepeatNewPassword\">RepeatNewPassword</label>\r\n                    <Input\r\n                        id={'RepeatNewPassword'}\r\n                        type={'password'}\r\n                        onChange={(e) => setSecondPass(e.currentTarget.value)}\r\n                        value={secondPass}\r\n                        placeholder={'Repeat new password'}\r\n                    />\r\n\r\n                    <h3>Create new password and will send you further instructions to email</h3>\r\n\r\n                    <Button type={'submit'}>Create new password</Button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from './CheckEmail.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../store/store\";\r\n\r\n\r\nexport const CheckEmail = () => {\r\n    const email = useSelector<RootStateType, string>(state => state.password.email)\r\n\r\n\r\n    return (\r\n        <div className={s.checkEmail}>\r\n            <div className={s.container}>\r\n                <h1>IT-incubator</h1>\r\n                <div className={s.icon}><img src=\"https://su-19.ru/wp-content/uploads/2020/12/mail_ico.png\"\r\n                                             alt=\"iconMail\"/></div>\r\n\r\n                <h3>We've sent an Email with instructions to {email}</h3>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {Button} from '../UI/Button/Button'\r\nimport {Input} from '../UI/Input/Input'\r\nimport {Checkbox} from '../UI/Checkbox/Checkbox'\r\n\r\nexport const UiKit: FC = () => {\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'column', alignItems: 'flex-start', gap: 24}}>\r\n            <Button>Button</Button>\r\n            <Input/>\r\n            <Checkbox>Check Me</Checkbox>\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react'\r\n\r\nexport const Error: FC = () => {\r\n    return (\r\n        <div>\r\n            <h1>Error 404</h1>\r\n        </div>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {Route, Switch} from 'react-router-dom'\r\nimport {publicRoutes} from '../routes/routes'\r\n\r\nexport const AppRouter: FC = () => {\r\n    return (\r\n        <>\r\n            <Switch>\r\n                {publicRoutes.map(r => <Route key={r.path} path={r.path} component={r.component} exact={r.exact}/>)}\r\n            </Switch>\r\n        </>\r\n    )\r\n}","import React, {FC} from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {PATH} from '../../routes/routes'\r\nimport s from './Header.module.css'\r\n\r\nexport const Header: FC = () => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <nav className={s.container}>\r\n                <Link to={PATH.HOME}>Home</Link>\r\n                <Link to={PATH.PROFILE}>Profile</Link>\r\n                <Link to={PATH.LOGIN}>Login</Link>\r\n                <Link to={PATH.REGISTER}>Register</Link>\r\n                <Link to={PATH.PASSWORD_RECOVERY}>Password Recovery</Link>\r\n                <Link to={PATH.NEW_PASSWORD}>New Password</Link>\r\n                <Link to={PATH.CHECK_EMAIL}>Check email</Link>\r\n                <Link to={PATH.UI_KIT}>UI Kit</Link>\r\n            </nav>\r\n        </div>\r\n\r\n    )\r\n}","const initialState = {}\r\n\r\nexport const profileReducer = (state = initialState, action: any): typeof initialState => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","const initialState = {}\r\n\r\nexport const authReducer = (state = initialState, action: any): typeof initialState => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","const initialState = {}\r\n\r\nexport const appReducer = (state = initialState, action: any): typeof initialState => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {profileReducer} from './reducers/profile-reducer'\r\nimport {authReducer} from './reducers/auth-reducer'\r\nimport {appReducer} from './reducers/app-reducer'\r\nimport {loginReducer} from './reducers/login-reducer'\r\nimport {registerReducer} from './reducers/register-reducer'\r\nimport {passwordRecoveryReducer} from './reducers/password-recovery-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    password: passwordRecoveryReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type RootStateType = ReturnType<typeof rootReducer>","import React, {FC} from 'react'\r\nimport {AppRouter} from './AppRouter'\r\nimport {HashRouter} from 'react-router-dom'\r\nimport {Header} from '../components/Header/Header'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from '../store/store'\r\n\r\nexport const App: FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <Header/>\r\n                <AppRouter/>\r\n            </Provider>\r\n        </HashRouter>\r\n    )\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport {App} from './app/App'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n                <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}